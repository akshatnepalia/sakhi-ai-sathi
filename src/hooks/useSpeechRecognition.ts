
import { useState, useRef } from 'react';
import { useToast } from '@/hooks/use-toast';

const getLanguageConfig = (langCode: string) => {
  const configs = {
    'hi': { lang: 'hi-IN', name: 'Hindi (‡§π‡§ø‡§Ç‡§¶‡•Ä)' },
    'en': { lang: 'en-US', name: 'English' },
    'bn': { lang: 'bn-IN', name: 'Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)' },
    'te': { lang: 'te-IN', name: 'Telugu (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å)' },
    'mr': { lang: 'mr-IN', name: 'Marathi (‡§Æ‡§∞‡§æ‡§†‡•Ä)' },
    'ta': { lang: 'ta-IN', name: 'Tamil (‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç)' },
    'gu': { lang: 'gu-IN', name: 'Gujarati (‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä)' },
    'kn': { lang: 'kn-IN', name: 'Kannada (‡≤ï‡≤®‡≥ç‡≤®‡≤°)' },
    'ml': { lang: 'ml-IN', name: 'Malayalam (‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç)' },
    'pa': { lang: 'pa-IN', name: 'Punjabi (‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä)' },
    'or': { lang: 'or-IN', name: 'Odia (‡¨ì‡¨°‡¨º‡¨ø‡¨Ü)' },
    'as': { lang: 'as-IN', name: 'Assamese (‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ)' }
  };
  return configs[langCode as keyof typeof configs] || configs['en'];
};

export const useSpeechRecognition = (currentLanguage: string) => {
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<any>(null);
  const { toast } = useToast();

  const startListening = (onResult: (transcript: string) => void) => {
    const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
    
    if (!SpeechRecognition) {
      toast({
        title: "‚ùå Voice Not Supported",
        description: "Speech recognition is not supported on this browser. Try Chrome or Edge.",
        variant: "destructive"
      });
      return;
    }

    if (isListening) {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      return;
    }

    try {
      const recognition = new SpeechRecognition();
      recognitionRef.current = recognition;
      const langConfig = getLanguageConfig(currentLanguage);
      
      recognition.lang = langConfig.lang;
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onstart = () => {
        setIsListening(true);
        toast({
          title: `üé§ Listening...`,
          description: `Speak in ${langConfig.name}`,
          variant: "default"
        });
      };

      recognition.onresult = (event) => {
        if (event.results.length > 0) {
          const transcript = event.results[0][0].transcript;
          onResult(transcript);
          toast({
            title: "‚úÖ Voice Recognized",
            description: `Heard: "${transcript}"`,
            variant: "default"
          });
        }
        setIsListening(false);
      };

      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
        
        let errorMessage = "Voice recognition failed. Please try again.";
        switch (event.error) {
          case 'no-speech':
            errorMessage = "No speech detected. Please try speaking again.";
            break;
          case 'audio-capture':
            errorMessage = "Microphone not accessible. Please check permissions.";
            break;
          case 'not-allowed':
            errorMessage = "Microphone permission denied. Please allow microphone access.";
            break;
          case 'network':
            errorMessage = "Network error. Please check your internet connection.";
            break;
        }
        
        toast({
          title: "üé§ Voice Error",
          description: errorMessage,
          variant: "destructive"
        });
      };

      recognition.onend = () => {
        setIsListening(false);
      };

      recognition.start();
    } catch (error) {
      console.error('Speech recognition setup error:', error);
      setIsListening(false);
      toast({
        title: "‚ùå Voice Setup Failed",
        description: "Could not initialize voice recognition. Please try again.",
        variant: "destructive"
      });
    }
  };

  return { isListening, startListening };
};
