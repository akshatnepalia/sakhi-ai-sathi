
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Download, FileText, Calculator, TrendingUp } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface BusinessPlan {
  businessName: string;
  businessType: string;
  location: string;
  initialInvestment: number;
  monthlyExpenses: number;
  expectedRevenue: number;
  description: string;
  targetMarket: string;
  products: string;
}

const BusinessPlanGenerator = () => {
  const [plan, setPlan] = useState<BusinessPlan>({
    businessName: '',
    businessType: '',
    location: '',
    initialInvestment: 0,
    monthlyExpenses: 0,
    expectedRevenue: 0,
    description: '',
    targetMarket: '',
    products: ''
  });
  
  const [generatedPlan, setGeneratedPlan] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const businessTypes = [
    'Food & Catering',
    'Handicrafts & Textiles',
    'Beauty & Wellness',
    'Retail & Trading',
    'Agriculture & Farming',
    'Education & Training',
    'Home-based Services',
    'Digital Services'
  ];

  const generateBusinessPlan = () => {
    if (!plan.businessName || !plan.businessType) {
      toast({
        title: "Missing Information",
        description: "Please fill in business name and type at minimum.",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);

    // Simulate generation delay
    setTimeout(() => {
      const roi = plan.initialInvestment > 0 ? 
        ((plan.expectedRevenue * 12 - plan.monthlyExpenses * 12 - plan.initialInvestment) / plan.initialInvestment * 100).toFixed(1) : '0';
      
      const breakEvenMonths = plan.expectedRevenue > plan.monthlyExpenses ? 
        Math.ceil(plan.initialInvestment / (plan.expectedRevenue - plan.monthlyExpenses)) : 'N/A';

      const businessPlanContent = `
# ${plan.businessName} - Business Plan

## Executive Summary
**Business Name:** ${plan.businessName}
**Business Type:** ${plan.businessType}
**Location:** ${plan.location}
**Owner:** SHG Member

## Business Description
${plan.description || 'A promising business venture focused on serving the local community with quality products/services.'}

## Products/Services
${plan.products || 'Quality products/services tailored to meet customer needs in the local market.'}

## Target Market
${plan.targetMarket || 'Local community members, nearby villages, and potential online customers.'}

## Financial Projections

### Initial Investment Required
â‚¹${plan.initialInvestment.toLocaleString()}

### Monthly Expenses
â‚¹${plan.monthlyExpenses.toLocaleString()}

### Expected Monthly Revenue
â‚¹${plan.expectedRevenue.toLocaleString()}

### Expected Annual Profit
â‚¹${((plan.expectedRevenue - plan.monthlyExpenses) * 12).toLocaleString()}

### Return on Investment (ROI)
${roi}% annually

### Break-even Period
${breakEvenMonths} months

## Marketing Strategy
- Word-of-mouth marketing through SHG network
- Local community engagement
- Social media presence (WhatsApp, Facebook)
- Participation in local markets and fairs
- Quality customer service for repeat business

## Government Support Available
- MUDRA Loan for business funding
- SHG support schemes
- Skill development programs
- Marketing assistance through local authorities

## Risk Analysis & Mitigation
- **Market Risk:** Diversify products/services
- **Financial Risk:** Maintain emergency fund
- **Competition:** Focus on quality and customer service
- **Supply Chain:** Develop multiple supplier relationships

## Growth Plan
**Year 1:** Establish business and build customer base
**Year 2:** Expand product line and increase marketing
**Year 3:** Consider additional locations or online expansion

## Success Metrics
- Monthly revenue target: â‚¹${plan.expectedRevenue.toLocaleString()}
- Customer acquisition: 10-20 new customers monthly
- Profit margin: Maintain above 30%
- Business sustainability: Achieve break-even by month ${breakEvenMonths}

---
*Generated by SakhiCopilot - Your Business Companion*
*Date: ${new Date().toLocaleDateString()}*
`;

      setGeneratedPlan(businessPlanContent);
      setIsGenerating(false);
      
      toast({
        title: "âœ… Business Plan Generated!",
        description: "Your comprehensive business plan is ready for download.",
      });
    }, 2000);
  };

  const downloadPlan = () => {
    const element = document.createElement('a');
    const file = new Blob([generatedPlan], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${plan.businessName || 'Business'}-Plan.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    
    toast({
      title: "ðŸ“„ Downloaded!",
      description: "Business plan saved to your device.",
    });
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center mb-8">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
          <FileText className="w-8 h-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Business Plan Generator</h1>
        <p className="text-gray-600">Create a professional business plan in minutes</p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Calculator className="w-5 h-5 mr-2" />
              Business Details
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="businessName">Business Name *</Label>
              <Input
                id="businessName"
                value={plan.businessName}
                onChange={(e) => setPlan({...plan, businessName: e.target.value})}
                placeholder="e.g., Sunita's Pickles"
              />
            </div>

            <div>
              <Label htmlFor="businessType">Business Type *</Label>
              <Select onValueChange={(value) => setPlan({...plan, businessType: value})}>
                <SelectTrigger>
                  <SelectValue placeholder="Select business type" />
                </SelectTrigger>
                <SelectContent>
                  {businessTypes.map((type) => (
                    <SelectItem key={type} value={type}>{type}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="location">Location</Label>
              <Input
                id="location"
                value={plan.location}
                onChange={(e) => setPlan({...plan, location: e.target.value})}
                placeholder="Village/City, State"
              />
            </div>

            <div>
              <Label htmlFor="description">Business Description</Label>
              <Textarea
                id="description"
                value={plan.description}
                onChange={(e) => setPlan({...plan, description: e.target.value})}
                placeholder="What does your business do?"
                rows={3}
              />
            </div>

            <div>
              <Label htmlFor="products">Products/Services</Label>
              <Textarea
                id="products"
                value={plan.products}
                onChange={(e) => setPlan({...plan, products: e.target.value})}
                placeholder="What will you sell or offer?"
                rows={2}
              />
            </div>

            <div>
              <Label htmlFor="targetMarket">Target Customers</Label>
              <Input
                id="targetMarket"
                value={plan.targetMarket}
                onChange={(e) => setPlan({...plan, targetMarket: e.target.value})}
                placeholder="Who will buy from you?"
              />
            </div>
          </CardContent>
        </Card>

        {/* Financial Input */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <TrendingUp className="w-5 h-5 mr-2" />
              Financial Planning
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="initialInvestment">Initial Investment (â‚¹)</Label>
              <Input
                id="initialInvestment"
                type="number"
                value={plan.initialInvestment}
                onChange={(e) => setPlan({...plan, initialInvestment: Number(e.target.value)})}
                placeholder="e.g., 50000"
              />
            </div>

            <div>
              <Label htmlFor="monthlyExpenses">Monthly Expenses (â‚¹)</Label>
              <Input
                id="monthlyExpenses"
                type="number"
                value={plan.monthlyExpenses}
                onChange={(e) => setPlan({...plan, monthlyExpenses: Number(e.target.value)})}
                placeholder="e.g., 5000"
              />
            </div>

            <div>
              <Label htmlFor="expectedRevenue">Expected Monthly Revenue (â‚¹)</Label>
              <Input
                id="expectedRevenue"
                type="number"
                value={plan.expectedRevenue}
                onChange={(e) => setPlan({...plan, expectedRevenue: Number(e.target.value)})}
                placeholder="e.g., 15000"
              />
            </div>

            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-semibold text-blue-800 mb-2">Quick Analysis</h4>
              <div className="text-sm text-blue-700 space-y-1">
                <p>Monthly Profit: â‚¹{(plan.expectedRevenue - plan.monthlyExpenses).toLocaleString()}</p>
                <p>Annual Profit: â‚¹{((plan.expectedRevenue - plan.monthlyExpenses) * 12).toLocaleString()}</p>
                {plan.initialInvestment > 0 && plan.expectedRevenue > plan.monthlyExpenses && (
                  <p>Break-even: {Math.ceil(plan.initialInvestment / (plan.expectedRevenue - plan.monthlyExpenses))} months</p>
                )}
              </div>
            </div>

            <Button 
              onClick={generateBusinessPlan}
              disabled={isGenerating}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Generating Plan...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4 mr-2" />
                  Generate Business Plan
                </>
              )}
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Generated Plan Display */}
      {generatedPlan && (
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Your Business Plan</CardTitle>
            <Button onClick={downloadPlan} variant="outline">
              <Download className="w-4 h-4 mr-2" />
              Download Plan
            </Button>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto">
              <pre className="whitespace-pre-wrap text-sm">{generatedPlan}</pre>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default BusinessPlanGenerator;
