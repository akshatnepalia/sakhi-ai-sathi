
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Search, Download, Share2, ExternalLink, Mic, MicOff } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useSpeechRecognition } from '@/hooks/useSpeechRecognition';
import ShareButton from './ShareButton';

const mockSchemes = [
  {
    id: 1,
    name: "Pradhan Mantri MUDRA Yojana",
    description: "Micro finance scheme for small businesses",
    loanAmount: "Up to ‚Çπ10 Lakh",
    interestRate: "8-12% per annum",
    department: "Ministry of Finance",
    eligibility: "Women entrepreneurs, SHG members",
    documents: ["Aadhar Card", "Bank Statement", "Business Plan"],
    steps: [
      "Visit nearest bank or NBFC",
      "Fill MUDRA loan application",
      "Submit required documents",
      "Business verification by bank",
      "Loan approval and disbursement"
    ]
  },
  {
    id: 2,
    name: "Stand-Up India Scheme",
    description: "Bank loans for SC/ST and women entrepreneurs",
    loanAmount: "‚Çπ10 Lakh to ‚Çπ1 Crore",
    interestRate: "As per bank rates",
    department: "Ministry of Finance",
    eligibility: "SC/ST or Women entrepreneurs",
    documents: ["Identity Proof", "Address Proof", "Business Plan", "Project Report"],
    steps: [
      "Register on Stand-Up India portal",
      "Submit online application",
      "Bank verification process",
      "Loan sanction and disbursement"
    ]
  },
  {
    id: 3,
    name: "Deen Dayal Antyodaya Yojana - NRLM",
    description: "National Rural Livelihood Mission for SHG support",
    loanAmount: "‚Çπ1 Lakh to ‚Çπ20 Lakh",
    interestRate: "7% per annum",
    department: "Ministry of Rural Development",
    eligibility: "Rural women, SHG members",
    documents: ["SHG Certificate", "Aadhar Card", "Bank Details"],
    steps: [
      "Form or join SHG",
      "Register with NRLM",
      "Submit project proposal",
      "Training and capacity building",
      "Loan disbursement"
    ]
  }
];

const GovernmentSchemes = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredSchemes, setFilteredSchemes] = useState(mockSchemes);
  const [selectedScheme, setSelectedScheme] = useState(null);
  const [isListening, setIsListening] = useState(false);
  const { toast } = useToast();
  const { startListening } = useSpeechRecognition('hi');

  const handleSearch = (query: string) => {
    const filtered = mockSchemes.filter(scheme =>
      scheme.name.toLowerCase().includes(query.toLowerCase()) ||
      scheme.description.toLowerCase().includes(query.toLowerCase()) ||
      scheme.eligibility.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredSchemes(filtered);
  };

  const handleVoiceSearch = () => {
    if (isListening) return;
    
    setIsListening(true);
    startListening((transcript: string) => {
      setSearchQuery(transcript);
      handleSearch(transcript);
      setIsListening(false);
      toast({
        title: "üé§ Voice Search Complete",
        description: `Searching for: "${transcript}"`,
      });
    });
  };

  const downloadSchemeInfo = (scheme: any) => {
    const content = `
GOVERNMENT SCHEME INFORMATION

Scheme: ${scheme.name}
Department: ${scheme.department}
Loan Amount: ${scheme.loanAmount}
Interest Rate: ${scheme.interestRate}

Description: ${scheme.description}

Eligibility: ${scheme.eligibility}

Required Documents:
${scheme.documents.map((doc: string, index: number) => `${index + 1}. ${doc}`).join('\n')}

Steps to Apply:
${scheme.steps.map((step: string, index: number) => `${index + 1}. ${step}`).join('\n')}

Generated by SakhiCopilot - Your Business Companion
Date: ${new Date().toLocaleDateString()}
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${scheme.name.replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "üìÑ Download Complete",
      description: "Scheme information downloaded successfully!",
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üèõÔ∏è ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç
          </h1>
          <p className="text-xl text-gray-600 mb-6">
            Find the perfect government scheme for your business
          </p>
          
          <div className="flex max-w-2xl mx-auto space-x-2">
            <div className="flex-1 relative">
              <Input
                placeholder="Search schemes... (e.g., loan, stitching, pickle business)"
                value={searchQuery}
                onChange={(e) => {
                  setSearchQuery(e.target.value);
                  handleSearch(e.target.value);
                }}
                className="pr-12"
              />
              <Button
                onClick={handleVoiceSearch}
                disabled={isListening}
                variant="ghost"
                size="sm"
                className={`absolute right-2 top-1/2 transform -translate-y-1/2 ${
                  isListening ? 'text-red-500 animate-pulse' : 'text-blue-500'
                }`}
              >
                {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
              </Button>
            </div>
            <Button onClick={() => handleSearch(searchQuery)} className="bg-blue-600 hover:bg-blue-700">
              <Search className="w-4 h-4 mr-2" />
              Search
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {filteredSchemes.map((scheme) => (
            <Card key={scheme.id} className="hover:shadow-lg transition-shadow border-l-4 border-l-blue-500">
              <CardHeader>
                <CardTitle className="text-lg text-blue-900">{scheme.name}</CardTitle>
                <CardDescription>{scheme.description}</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Loan Amount:</span>
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      {scheme.loanAmount}
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Interest Rate:</span>
                    <Badge variant="outline">{scheme.interestRate}</Badge>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>Department:</strong> {scheme.department}
                  </div>
                  
                  <div className="flex space-x-2 pt-4">
                    <Button
                      onClick={() => setSelectedScheme(scheme)}
                      variant="default"
                      size="sm"
                      className="flex-1 bg-blue-600 hover:bg-blue-700"
                    >
                      <ExternalLink className="w-4 h-4 mr-1" />
                      Details
                    </Button>
                    <Button
                      onClick={() => downloadSchemeInfo(scheme)}
                      variant="outline"
                      size="sm"
                    >
                      <Download className="w-4 h-4" />
                    </Button>
                    <ShareButton
                      type="scheme"
                      data={scheme}
                      variant="outline"
                      size="sm"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {selectedScheme && (
          <Card className="mb-8 border-2 border-blue-200">
            <CardHeader className="bg-blue-50">
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle className="text-2xl text-blue-900">{selectedScheme.name}</CardTitle>
                  <CardDescription className="text-lg mt-2">{selectedScheme.description}</CardDescription>
                </div>
                <Button
                  onClick={() => setSelectedScheme(null)}
                  variant="ghost"
                  size="sm"
                >
                  ‚úï
                </Button>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="font-semibold text-lg mb-3 text-gray-900">üìã Scheme Details</h3>
                  <div className="space-y-2">
                    <div><strong>Loan Amount:</strong> {selectedScheme.loanAmount}</div>
                    <div><strong>Interest Rate:</strong> {selectedScheme.interestRate}</div>
                    <div><strong>Department:</strong> {selectedScheme.department}</div>
                    <div><strong>Eligibility:</strong> {selectedScheme.eligibility}</div>
                  </div>
                  
                  <h4 className="font-semibold mt-4 mb-2 text-gray-900">üìÑ Required Documents:</h4>
                  <ul className="list-disc list-inside space-y-1">
                    {selectedScheme.documents.map((doc: string, index: number) => (
                      <li key={index} className="text-sm">{doc}</li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="font-semibold text-lg mb-3 text-gray-900">üìù Steps to Apply</h3>
                  <ol className="list-decimal list-inside space-y-2">
                    {selectedScheme.steps.map((step: string, index: number) => (
                      <li key={index} className="text-sm">{step}</li>
                    ))}
                  </ol>
                  
                  <div className="flex space-x-2 mt-6">
                    <Button
                      onClick={() => downloadSchemeInfo(selectedScheme)}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Download Info
                    </Button>
                    <ShareButton
                      type="scheme"
                      data={selectedScheme}
                      variant="outline"
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {filteredSchemes.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-semibold text-gray-700 mb-2">No schemes found</h3>
            <p className="text-gray-600">Try searching with different keywords like "loan", "women", or "business"</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default GovernmentSchemes;
